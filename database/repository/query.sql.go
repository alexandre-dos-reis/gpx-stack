// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const findAllProducts = `-- name: FindAllProducts :many
SELECT
    id, name, slug
FROM
    products
`

func (q *Queries) FindAllProducts(ctx context.Context) ([]Product, error) {
	rows, err := q.db.Query(ctx, findAllProducts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(&i.ID, &i.Name, &i.Slug); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findOneProductBySlug = `-- name: FindOneProductBySlug :one
SELECT
    id, name, slug
FROM
    products
WHERE
    slug = $1
`

func (q *Queries) FindOneProductBySlug(ctx context.Context, slug pgtype.Text) (Product, error) {
	row := q.db.QueryRow(ctx, findOneProductBySlug, slug)
	var i Product
	err := row.Scan(&i.ID, &i.Name, &i.Slug)
	return i, err
}
